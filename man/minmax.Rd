% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/toolBox.R
\name{minmax}
\alias{minmax}
\title{Minmax scaling}
\usage{
minmax(mat)
}
\arguments{
\item{mat}{a matrix with rows correspond to phosphosites and columns
correspond to condition}
}
\value{
Minmax standardised matrix
}
\description{
Perform a minmax standardisation to scale data into 0 to 1 range
}
\examples{

data('phospho.L6.ratio.pe')
data('SPSs')
data('PhosphoSitePlus')

grps = gsub('_.+', '', colnames(phospho.L6.ratio.pe))

# Construct a design matrix by condition
design = model.matrix(~ grps - 1)

# phosphoproteomics data normalisation using RUV
L6.sites = paste(sapply(phospho.L6.ratio.pe@GeneSymbol, function(x)paste(x)),
                 ";",
                 sapply(phospho.L6.ratio.pe@Residue, function(x)paste(x)),
                 sapply(phospho.L6.ratio.pe@Site, function(x)paste(x)),
                 ";", sep = "")
ctl = which(L6.sites \%in\% SPSs)
phospho.L6.ratio.pe = RUVphospho(phospho.L6.ratio.pe, 
                                  M = design, k = 3,ctl = ctl)

phosphoL6 = phospho.L6.ratio.pe@assays@data$normalised

# filter for up-regulated phosphosites
phosphoL6.mean <- meanAbundance(phosphoL6, grps = grps)
aov <- matANOVA(mat=phosphoL6, grps = grps)
phosphoL6.reg <- phosphoL6[(aov < 0.05) &
                        (rowSums(phosphoL6.mean > 0.5) > 0), drop = FALSE]
L6.phos.std <- standardise(phosphoL6.reg)

idx <- match(rownames(L6.phos.std), L6.sites)
L6.phos.seq <- phospho.L6.ratio.pe@Sequence[idx]

numMotif = 5
numSub = 1

ks.profile.list <- kinaseSubstrateProfile(PhosphoSite.mouse, L6.phos.std)
motif.mouse.list = PhosR::motif.mouse.list

motif.mouse.list.filtered <-
    motif.mouse.list[which(motif.mouse.list$NumInputSeq >= numMotif)]
ks.profile.list.filtered <-
    ks.profile.list[which(ks.profile.list$NumSub >= numSub)]

# scoring all phosphosites against all motifs
motifScoreMatrix <-
    matrix(NA, nrow=nrow(L6.phos.std),
    ncol=length(motif.mouse.list.filtered))
rownames(motifScoreMatrix) <- rownames(L6.phos.std)
colnames(motifScoreMatrix) <- names(motif.mouse.list.filtered)

# extracting flanking sequences
seqWin = mapply(function(x) {
    mid <- (nchar(x)+1)/2
    substr(x, start=(mid-7), stop=(mid+7))
}, L6.phos.seq)


print('Scoring phosphosites against kinase motifs:')
for(i in seq_len(length(motif.mouse.list.filtered))) {
    motifScoreMatrix[,i] <-
        frequencyScoring(seqWin, motif.mouse.list.filtered[[i]])
        cat(paste(i, '.', sep=''))
}
motifScoreMatrix <- minmax(motifScoreMatrix)


}
