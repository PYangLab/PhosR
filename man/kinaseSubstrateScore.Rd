% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/kinaseSubstratePrediction.R
\name{kinaseSubstrateScore}
\alias{kinaseSubstrateScore}
\title{Kinase substrate scoring}
\usage{
kinaseSubstrateScore(
    substrate.list,
    mat,
    seqs,
    numMotif = 5, 
    numSub = 1, 
    verbose = TRUE
)
}
\arguments{
\item{substrate.list}{a list of kinases with each element containing an array
of substrates.}

\item{mat}{a matrix with rows correspond to phosphosites and columns
correspond to samples.}

\item{seqs}{an array containing aa sequences surrounding each of all
phosphosites.
Each sequence has length of 15 (-7, p, +7).}

\item{numMotif}{minimum number of sequences used for compiling motif for
each kinase.
Default is 5.}

\item{numSub}{minimum number of phosphosites used for compiling
phosphorylation
profile for each kinase. Default is 1.}

\item{verbose}{Default to \code{TRUE} to show messages during the progress.
All messages will be suppressed if set to \code{FALSE}}
}
\value{
A list of 4 elements.
\code{motifScoreMatrix}, \code{profileScoreMatrix},
\code{combinedScoreMatrix}, \code{ksActivityMatrix} (kinase activity matrix)
and their \code{weights}.
}
\description{
This function generates substrate scores for kinases that pass
filtering based on both motifs and dynamic profiles
}
\examples{

data('phospho_L6_ratio')
data('SPSs')
data('PhosphoSitePlus')

grps = gsub('_.+', '', colnames(phospho.L6.ratio))

# Cleaning phosphosite label
phospho.site.names = rownames(phospho.L6.ratio)
L6.sites = gsub(' ', '', sapply(strsplit(rownames(phospho.L6.ratio), ';'),
                                function(x){paste(toupper(x[2]), x[3], '',
                                                sep=';')}))
phospho.L6.ratio = t(sapply(split(data.frame(phospho.L6.ratio), L6.sites),
                            colMeans))
phospho.site.names = split(phospho.site.names, L6.sites)

# Construct a design matrix by condition
design = model.matrix(~ grps - 1)

# phosphoproteomics data normalisation using RUV
ctl = which(rownames(phospho.L6.ratio) \%in\% SPSs)
phospho.L6.ratio.RUV = RUVphospho(phospho.L6.ratio, M = design, k = 3,
                                ctl = ctl)


phosphoL6 = phospho.L6.ratio.RUV
rownames(phosphoL6) = phospho.site.names

# filter for up-regulated phosphosites
phosphoL6.mean <- meanAbundance(phosphoL6,
                                grps = gsub('_.+', '', colnames(phosphoL6)))
aov <- matANOVA(mat=phosphoL6, grps=gsub('_.+', '', colnames(phosphoL6)))
phosphoL6.reg <- phosphoL6[(aov < 0.05) &
                        (rowSums(phosphoL6.mean > 0.5) > 0),,drop = FALSE]
L6.phos.std <- standardise(phosphoL6.reg)
rownames(L6.phos.std) <- sapply(strsplit(rownames(L6.phos.std), ';'),
    function(x){gsub(' ', '', paste(toupper(x[2]), x[3], '', sep=';'))})

L6.phos.seq <- sapply(strsplit(rownames(phosphoL6.reg), ';'),
                    function(x)x[4])

L6.matrices <- kinaseSubstrateScore(PhosphoSite.mouse, L6.phos.std,
    L6.phos.seq, numMotif = 5, numSub = 1)

}
